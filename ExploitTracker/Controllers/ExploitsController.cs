using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using ExploitTracker.Models;
using ExploitTracker.Utils;

namespace ExploitTracker.Controllers
{

    public class ExploitsController : Controller
    {
        [Route("/")]
        public IEnumerable<string> Index()
        {
            return new string[] {"one", "two"};
        }

        [HttpPost]
        [Route("/exploits")]
        public IActionResult About([FromBody] Exploit inputExploit)
        {
            DataStore<Exploit> dataStore = DataStore<Exploit>.GetInstance();
            dataStore.Add(inputExploit);

            return Ok();
        }

        [HttpGet("/exploits/{expName}")]
        public JsonResult GetExploit(string expName)
        {
            DataStore<Exploit> dataStore = DataStore<Exploit>.GetInstance();
            Exploit exp = dataStore.GetItems().FirstOrDefault(e => e.Name.Equals(expName));

            List<Exploit> relatedExploits = FindRelated(exp);
            
            return Json(AddLinks(exp, relatedExploits));
        }

        private List<Exploit> FindRelated(Exploit exp)
        {
            List<Exploit> related = new List<Exploit>();
            Exploit e = new Exploit("MITM");
            Exploit e2 = new Exploit("CSRF");
            Exploit e3 = new Exploit("XSS");
            related.Add(e);
            related.Add(e2);
            related.Add(e3);            

            return related;
        }

        private Exploit AddLinks(Exploit exp, List<Exploit> relatedExps)
        {

            AddLinks(exp, 
                     Enumerable.Range(0, relatedExps.Count()).Select(x => {
                        Hyperlink link = new Hyperlink("http://localhost:5000/exploits/" + relatedExps[x].Name,
                                                   "item",
                                                   HttpVerb.GET.ToString());
                        return link;
                    })
            );

            return exp;
        }

        private void AddLinks(Exploit exp, IEnumerable<Hyperlink> links)
        {
            exp.links.AddRange(links);
        }

    }
}
