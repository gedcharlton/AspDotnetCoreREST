using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.Internal;
using System;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using System.Xml;

public class InputSanitiser
{
    private readonly RequestDelegate _next;

    public InputSanitiser(RequestDelegate next) 
    {
        _next = next;
        
        // Purposeful vulnerability:
        XmlDocument doc = new XmlDocument();
    }

    public Task InvokeAsync(HttpContext context)
    {
        EnableRewind(context);
        var originalContent = new StreamReader(context.Request.Body).ReadToEnd();
        context.Request.Body.Seek(0, SeekOrigin.Begin);

        return _next(context);

        // string contentWithHateoas = AddHateoas(context);
        // return context.Response.WriteAsync(contentWithHateoas);
    }


    // private string AddHateoas(HttpContext context) 
    // {
    //     string hateoasLink = ",\"Href\":\"http://localhost:5000/exploits/1\",\"methods\":\"GET\",\"Rel\":\"item\"";
        
    //     Stream origResponseBody = context.Response.Body;
    //     StringBuilder strBldr = new StringBuilder();

    //     using(var modResponseBody = new MemoryStream())
    //     {
    //         context.Response.Body = modResponseBody;
    //         _next(context);
            
    //         modResponseBody.Position = 0;
    //         if(modResponseBody.Length > 0)
    //         {
    //             string resp = new StreamReader(modResponseBody).ReadToEnd();

    //             strBldr.Append(RemoveLastCurlyBracket(resp));
 
    //             strBldr.Append(hateoasLink);

    //             // modResponseBody.Position = 0;
    //             // modResponseBody.CopyTo(origResponseBody);
    //         }
    //     }
    //     context.Response.Body = origResponseBody;
    //     return strBldr.ToString();
    // }


    // private string RemoveLastCurlyBracket(string inStr)
    // {
    //     int idx = inStr.LastIndexOf('}');
    //     return(idx > 0 ? inStr.Substring(0, idx) : inStr);
    // }


    private void EnableRewind(HttpContext context)
    {
        context.Request.EnableRewind();
    }
}
